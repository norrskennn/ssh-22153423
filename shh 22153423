from logging import FileHandler
from netmiko import ConnectHandler
import difflib
import logging

# Define router connection parameters
router_params = {
    'device_type': 'cisco_ios',
    'host': '192.168.56.101',
    'username': 'prne',
    'password': 'cisco123!',
    'secret': 'class123!',
}

hostname = 'R1'

security_recommendations = """
! Cisco Hardening Advice

!General Recommendations

enable secret 5 $1$dYxA$WbhPASqVS56AAvopBYAbk1
service password-encryption
no ip http server
no ip http secure-server
ip domain name example.netacad.com
crypto key generate rsa modulus 2048
login block-for 120 attempts 3 within 60

! Management Access Control
line vty 0 15
    transport input ssh
    login local
    transport input telnet
    exec-timeout 5 0
    access-class 15
    password class123!

! Console Access Control
line con 0
    login local
    exec-timeout 5 0 
    access class 15 in
    password cisco123!

! SNMP Configuration
no snmp-server community
no snmp-server contact
no snmp-server location

! Logging configuration
logging buffered 4096
logging console critical
logging console warnings
logging trap notifications
no logging source-interface

! NTP Configuration
no ntp server
no ntp source

! Access control lists 
no ip access-list standard
    no permit
    no deny any log

! Interface Security
interface range 192.168.56.101/24
    no cdp enable
    switchport mode access
    switchport negotiate
    spanning-tree portfast
    ip verify source
"""

running_config = ""

# Establish SSH connection to router
def establish_ssh(router_params):
    try:
        with ConnectHandler(**router_params) as ssh_connection:
            ssh_connection.enable()
            print("SSH connection successful")
            ssh_connection.send_command("SSH Connection is established.")
    except Exception as e:
        print(f"Error: {str(e)}")

# Establish Telnet connection to router
def establish_telnet(router_params):
    try:
        with ConnectHandler(**router_params) as telnet_connection:
            telnet_connection.send_command("Telnet connection is established.")
    except Exception as e:
        print(f"Error: {str(e)}")

# Change router hostname
def update_hostname(router_params):
    new_hostname = input("Enter a new hostname: ")

    while True:
        print("\nHostname Update Menu:")
        print("1. Update hostname via SSH")
        print("2. Return to main menu")
        print("0. Exit")

        choice = input("Enter your choice: ")

        if choice == '1':
            establish_ssh(router_params)
        elif choice == '2':
            break
        elif choice == '0':
            print(f"Exiting from {new_hostname}.")
            exit()
        else:
            print("Invalid choice, try again")

# Fetch running configuration from router
def fetch_running_config(router_params):
    try:
        with ConnectHandler(**router_params) as ssh_connection:
            ssh_connection.enable()
            output = ssh_connection.send_command("show running-config")
            return output
    except Exception as e:
        print(f"Error: {str(e)}")

# Compare current config with hardening recommendations
def compare_config_with_recommendations(current_config, recommendations):
    diff = difflib.Differ().compare(current_config.splitlines(), recommendations.splitlines())
    print("\n".join(diff))

# Configure syslog settings and log to a file
def configure_syslog(router_params):
    try:
        syslog_file_handler = FileHandler('syslog_events_monitoring.txt')
        formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
        syslog_file_handler.setFormatter(formatter)

        logger = logging.getLogger()
        logger.addHandler(syslog_file_handler)
        logger.setLevel(logging.INFO)

        with ConnectHandler(**router_params) as ssh_connection:
            ssh_connection.enable()
            syslog_commands = [
                'logging buffered 4096',
                'logging console warnings',
                'logging monitor warnings',
                'logging trap notifications',
            ]
            ssh_connection.send_config_set(syslog_commands)
            ssh_connection.send_command("Logging and event monitoring configured.")
    except Exception as e:
        print(f"Error: {str(e)}")

# Main menu
while True:
    print("\nMain Menu:")
    print("1. Change Hostname")
    print("2. Establish SSH Connection")
    print("3. Establish Telnet Connection")
    print("4. Fetch Running Configuration")
    print("5. Compare Configuration with Cisco Hardening Advice")
    print("6. Configure Syslog and Event Logging")
    print("0. Exit")

    user_choice = input("Enter your choice: ")

    if user_choice == '1':
        update_hostname(router_params)
    elif user_choice == '2':
        establish_ssh(router_params)
    elif user_choice == '3':
        establish_telnet(router_params)
    elif user_choice == '4':
        running_config = fetch_running_config(router_params)
        print("Current Running Configuration:\n", running_config)
    elif user_choice == '5':
        compare_config_with_recommendations(running_config, security_recommendations)
    elif user_choice == '6':
        configure_syslog(router_params)
    elif user_choice == '0':
        print("Exiting router now.")
        exit()
    else:
        print("Invalid option, please try again.")
